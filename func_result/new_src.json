[
    {
        "quadtree.c": [
            "quadtree_new(double, double, double, double)",
            "quadtree_point_free(quadtree_point_t *)",
            "quadtree_point_new(double, double)",
            "quadtree_insert(quadtree_t *, double, double, void *)",
            "quadtree_node_isempty(quadtree_node_t *)",
            "elision_(void *)",
            "quadtree_walk(quadtree_node_t *, void (*)(quadtree_node_t *), void (*)(quadtree_node_t *))",
            "quadtree_bounds_free(quadtree_bounds_t *)",
            "get_quadrant_(quadtree_node_t *, quadtree_point_t *)",
            "find_(quadtree_node_t *, double, double)",
            "quadtree_bounds_new()",
            "quadtree_node_free(quadtree_node_t *, void (*)(void *))",
            "split_node_(quadtree_t *, quadtree_node_t *)",
            "quadtree_free(quadtree_t *)",
            "insert_(quadtree_t *, quadtree_node_t *, quadtree_point_t *, void *)",
            "quadtree_node_new()",
            "quadtree_bounds_extend(quadtree_bounds_t *, double, double)",
            "quadtree_node_ispointer(quadtree_node_t *)",
            "quadtree_node_isleaf(quadtree_node_t *)",
            "reset_node_(quadtree_t *, quadtree_node_t *)",
            "quadtree_node_reset(quadtree_node_t *, void (*)(void *))",
            "quadtree_node_with_bounds(double, double, double, double)",
            "node_contains_(quadtree_node_t *, quadtree_point_t *)",
            "quadtree_search(quadtree_t *, double, double)"
        ]
    },
    {
        "ht.c": [
            "ht_expand(ht *)",
            "ht_create()",
            "hash_key(const char *)",
            "ht_destroy(ht *)",
            "ht_iterator(ht *)",
            "ht_set(ht *, const char *, void *)",
            "ht_get(ht *, const char *)",
            "ht_set_entry(ht_entry *, size_t, const char *, void *, size_t *)",
            "ht_length(ht *)",
            "ht_next(hti *)"
        ]
    },
    {
        "rgba.c": [
            "rgba_from_name_string(const char *, short *)",
            "rgba_from_hex3_string(const char *)",
            "rgba_inspect(uint32_t)",
            "rgba_new(uint32_t)",
            "h(char)",
            "rgba_from_hex_string(const char *, short *)",
            "rgba_from_rgba_string(const char *, short *)",
            "rgba_from_rgb_string(const char *, short *)",
            "rgba_to_string(rgba_t, char *, size_t)",
            "rgba_from_string(const char *, short *)",
            "rgba_from_hex6_string(const char *)",
            "rgba_from_rgb(uint8_t, uint8_t, uint8_t)",
            "rgba_from_rgba(uint8_t, uint8_t, uint8_t, uint8_t)"
        ]
    },
    {
        "buffer.c": [
            "buffer_resize(buffer_t *, size_t)",
            "buffer_equals(buffer_t *, buffer_t *)",
            "buffer_trim(buffer_t *)",
            "buffer_new_with_string_length(char *, size_t)",
            "buffer_append(buffer_t *, const char *)",
            "buffer_compact(buffer_t *)",
            "buffer_free(buffer_t *)",
            "buffer_indexof(buffer_t *, char *)",
            "buffer_new()",
            "buffer_new_with_size(size_t)",
            "buffer_fill(buffer_t *, int)",
            "buffer_length(buffer_t *)",
            "buffer_trim_right(buffer_t *)",
            "buffer_trim_left(buffer_t *)",
            "buffer_prepend(buffer_t *, char *)",
            "buffer_appendf(buffer_t *, const char *, ...)",
            "buffer_clear(buffer_t *)",
            "buffer_print(buffer_t *)",
            "buffer_size(buffer_t *)",
            "buffer_new_with_copy(char *)",
            "buffer_new_with_string(char *)",
            "buffer_slice(buffer_t *, size_t, ssize_t)",
            "buffer_append_n(buffer_t *, const char *, size_t)"
        ]
    },
    {
        "urlparser.c": [
            "PrintURL(struct URL_PARTS *)",
            "ParseURL(char *, URL_PARTS *)"
        ]
    },
    {
        "bst.c": [
            "_bst_subtree_insert(int, struct bst_node *)",
            "bst_free(struct bst *)",
            "bst_isempty(struct bst *)",
            "_bst_subtree_remove(int, struct bst_node *)",
            "bst_remove(int, struct bst *)",
            "_bst_node_create(int)",
            "_bst_subtree_min_val(struct bst_node *)",
            "bst_create()",
            "bst_insert(int, struct bst *)",
            "bst_contains(int, struct bst *)"
        ]
    }
]